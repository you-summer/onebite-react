/*
Node.js를 배우는 이유
React라는 기술은 Node.js를 기반으로 동작하는 기술이기 때문에

그리고 리액트 뿐만 아니라 Next.js Vue.js Svelte까지 모두 다 노드를 기반으로 동작하는 기술들
그래서 Node.js에 대한 기본적인 이해가 없다면 리액트를 배운다고 해도 제대로 이해하기는 굉장히 어렵고
오 어떻게든 건너뛰면서 학습한다고 해도 사실상 겉핥기 수준에 지나지 않기 때문에 이번 섹션에서 Node.js에 대해서 확실하게 살펴보고 넘어갈것

Node.js는 웹 브라우저가 아닌 환경에서도 우리 자바스크립트 코드를 실행시켜 주는 자바스크립트의 런타임, 자바스크립트의 실행 환경임
실행 환경이라는 단어를 좀 더 쉽게 말하자면 구동기라고 표현할 수 있음
구동기라는건 기본적으로 무언가를 동작시키는 기계라던가 프로그램을 의미하는 것

닌텐도가 게임칩이 있으면 그걸 구동해 주는 것 처럼
Node.js도 자바스크립트 코드를 실행시켜주는 구동기다 라고 이해 하면 됨.
그리고 우리 프로그래밍에서는 이러한 언어를 구동하는 구동기를 실행 환경이라고 해서 런타임이라고 표현

그래서 Node.js 공식 웹사이트에 들어가 보면 상단 소개문구에 Node.js는 자바스크립트 엔진으로 빌드, 즉 만들어진 자바스크립트의 런타임이다 라고 소개 되어있음

Node가 필요한 이유?
 -
 자바 스크립트는 태생 자체가 웹페이지 안에서 일어나는 아주 단순한 기능만을 개발하기 위해서 만들어진 간단한 스크립트 언어임
 사용자가 웹에서 버튼을 클릭하면 경고창을 띄워준다던가 아니면 요소의 색상을 변경시킨다던가 아주 단순한 인터랙션을 개발하기 위한 그런 목적으로 오직 웹브라우저 내에서만 동작할 수 있도록 개발이 되었음

 그렇기 때문에 동시대에 존재했던 C언어나 자바 언어와는 다르게 그 문법 자체가 매우 유연하고 작성하기가 편리하도록 설계되었음
 그래서 우리 개발자들이 최대한 빠르게 개발할 수 있도록 그 생산성에만 중심을 두고 언어가 설계가 된거임

 이런 자바스크립트의 문법 체계 또는 설계 철학에 많은 사람들이 큰 매력을 느끼게 됨
 자바스크립트로 웹페이지 내부의 기능을 만드는 걸 넘어서 이제는 웹 브라우저 바깥에서도 우리 자바스크립트를 이용해서 프로그램을 만들고 싶어함

 이러한 바램은 2009년도에 Node.js가 등장하게 되면서 자바스크립트는 어디서든 동작할 수 있는 범용적인 언어가 된거임
 그래서 Node.js는 자바스크립트가 가진 태생적인 한계를 넘어설 수 있게 해주었고
 이제는 Node.js를 이용해서 자바스크립트로 굉장히 많은 것들을 만들어 내기 시작함

 기존에 자바나 C,C#과 같은 언어로 만들던 웹서버는 이제 자바스크립트로 구축되는 일이 굉장히 많아짐
 그리고 또 더 나아가서 모바일 어플리케이션을 만들고 데스크탑 어플리케이션까지 만들기 시작
 그야말로 자바스크립트의 전성기를 Node.js가 이끌었다 라고 할수있다
*/